(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
var API = function API() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      service = _ref.service;

  this.openDetail = function (particella) {
    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref2$backonclose = _ref2.backonclose,
        backonclose = _ref2$backonclose === undefined ? false : _ref2$backonclose,
        id_immobile = _ref2.id_immobile;

    service.openDetail(particella, {
      backonclose: backonclose,
      id_immobile: id_immobile
    });
  };
};

exports.default = API;

},{}],2:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  it: {
    nodata: "Nessun dato disponibile",
    tab_title: "Particelle associate",
    messages: {
      errors: {
        parcel: "Non Ã¨ stato possibile ottenere i dettagli della particella"
      }
    },
    actions: {
      infoparcel: "Visualizza dettaglio particella"
    }
  },
  en: {
    nodata: "No data available",
    tab_title: "Associated particles",
    messages: {
      errors: {
        parcel: "No detail of parcel found"
      }
    },
    actions: {
      infoparcel: "Show parcel detail"
    }
  }
};

},{}],3:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  i18n: _i18n2.default
};

},{"./i18n":2}],4:[function(require,module,exports){
module.exports = "<div class=\"docfa\">\n    <div style=\"padding: 5px; overflow: hidden\">\n        <div class=\"info\" style=\"float:left;width:250px;padding-right:20px\">\n            <div style=\"display: table\">\n                <div style=\"display: table-row\">\n                    <div style=\"display: table-cell;padding-right:5px;;font-weight: bold\">Protocollo Docfa:</div>\n                    <div style=\"display: table-cell\">{{ docfa.protocollo }}</div>\n                </div>\n                <div style=\"display: table-row\">\n                    <div style=\"display: table-cell;padding-right:5px;;font-weight: bold\">Data registrazione:</div>\n                    <div style=\"display: table-cell\">{{ docfa.data_registrazione }}</div>\n                </div>\n                <div style=\"display: table-row\">\n                    <div style=\"display: table-cell;padding-right:5px;;font-weight: bold\">Download:</div>\n                    <div style=\"display: table-cell\"><a :href=\"docfa.download_pdf_path\" target=\"_blank\">{{ docfa.protocollo }}.pdf</a></div>\n                </div>\n            </div>\n            <div v-if=\"docfa.planimetrie.length\" style=\"margin-top:5px\">\n                <div>\n                  <span style=\"font-weight: bold\">Visualizza planimetrie:</span>\n                </div>\n                <ul class=\"elenco_planimetrie\" style=\"list-style: none;padding-left:10px\">\n                    <i class=\"fa-2x\" :class=\"g3wtemplate.getFontClass('picture')\" style=\"margin-right: 5px\"></i>\n                    <li v-for=\"planimetria in docfa.planimetrie\" style=\"display: inline-block\">\n                      <a :href=\"planimetria.download_path\" target=\"_blank\">{{ planimetria.nome_file }}</a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n        <div class=\"metrici\" style=\"display: inline-block;width:700px\">\n            <table style=\"width:100%; background-color: white\">\n                <tr>\n                    <td class=\"head\" style='width:20%'>Progressivo poligono</td>\n                    <td class=\"head\" style='width:20%'>Ambiente</td>\n                    <td class=\"head\" style='width:20%'>Superficie</td>\n                    <td class=\"head\" style='width:20%'>Altezza</td>\n                    <td class=\"head\" style='width:20%'>Altezza Max</td>\n                </tr>\n                <tr v-for=\"dati_m in docfa.dati_m_docfa\">\n                    <td>{{ dati_m.progressivo_poligono }}</td>\n                    <td>{{ dati_m.ambiente }}</td>\n                    <td>{{ dati_m.superficie }}</td>\n                    <td>{{ dati_m.altezza }}</td>\n                    <td>{{ dati_m.altezza_max }}</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n";

},{}],5:[function(require,module,exports){
module.exports = "<div class=\"fabbricato\">\n  <div class=\"header\">\n    Dati relativi alla particella particella <b class=\"skin-color\">{{ fabbricato.foglio }}/{{ fabbricato.numero }}</b> (Foglio <b class=\"skin-color\">{{ fabbricato.foglio }}</b>, Mappale <b class=\"skin-color\">{{ fabbricato.numero }}</b>)\n  </div>\n  <div v-if=\"fabbricato.subalterni.length\" class=\"subalterni\">\n    <table class=\"table table-striped\">\n      <thead>\n      <tr>\n        <th></th>\n        <th>Foglio</th>\n        <th>Mappale</th>\n        <th>Sez.</th>\n        <th style=\"width: 80px\">Sez. Urb.</th>\n        <th>Sub.</th>\n        <th>Partita</th>\n        <th>Denom.</th>\n        <th>Edif.</th>\n        <th>Ultimo classamento</th>\n        <th>Atto di Generazione o Conclusione</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr v-for=\"subalterno in fabbricato.subalterni\" is=\"tr-subalterno\" :subalterno=\"subalterno\" class=\"pointer\"></tr>\n      </tbody>\n    </table>\n  </div>\n  <div v-else>Non sono registrati subalterni per questa particella.</div>\n</div>\n";

},{}],6:[function(require,module,exports){
module.exports = "<div class=\"cadastre-page\" style=\"overflow-y: hidden\">\n    <component\n      :showback=\"showback\"\n      :is=\"currentview\"\n      :fabbricato=\"state\"\n      :subalterno=\"subalterno\"\n      :immobile=\"immobile\"\n      :id_immobile=\"id_immobile\">\n    </component>\n</div>\n";

},{}],7:[function(require,module,exports){
var inherit = g3wsdk.core.utils.inherit;
var base = g3wsdk.core.utils.base;
var GUI = g3wsdk.gui.GUI;
var Component = g3wsdk.gui.vue.Component;

/* SCHEDA PRINCIPALE FABBRICATO */
var fabbricatoComponent = {
  template: require('./fabbricato.html'),
  props: ['fabbricato', 'id_immobile'],
  components: {
    "tr-subalterno": {
      template: '\
      <tr @click="$parent.viewUiu(subalterno.id_immobile)">\
        <td><span class="action-button action-button-icon" :class="infoFontClass"></span></td>\
        <td>{{ subalterno.foglio }}</td>\
        <td>{{ subalterno.numero }}</td>\
        <td>{{ subalterno.sezione }}</td>\
        <td>{{ subalterno.sezione_urbana }}</td>\
        <td>{{ subalterno.subalterno }}</td>\
        <td :style="{background: partitaBackGroundColor}" >{{ partita }}</td>\
        <td>{{ subalterno.denominatore }}</td>\
        <td>{{ subalterno.edificabilita }}</td>\
        <td>\
          <span v-if="subalterno.immobile.categoria">cat. {{ subalterno.immobile.categoria }}</span> \
          <span v-if="subalterno.immobile.classe">classe {{ subalterno.immobile.classe }}</span> \
          <span v-if="subalterno.immobile.consistenza">consistenza {{ subalterno.immobile.consistenza }}</span> \
          <span v-if="subalterno.immobile.rendita_euro">rendita {{ subalterno.immobile.rendita_euro }}</span></td>\
        <td>Variazione nr. {{ lastAtto.numero_nota }}, {{ lastAtto.progressivo_nota }} / {{ lastAtto.anno_nota }} del {{ lastAtto.data_efficacia }}, registrato in atti dal {{ lastAtto.data_registrazione }}</td>\
      </tr>',
      props: ['subalterno'],
      computed: {
        infoFontClass: function infoFontClass() {
          return GUI.getFontClass('info');
        },

        lastAtto: function lastAtto() {
          return this.subalterno.immobile.atti[this.subalterno.immobile.atti.length - 1];
        },
        partitaBackGroundColor: function partitaBackGroundColor() {
          return this.subalterno.immobile.partita && this.subalterno.immobile.partita.valore == 'C' ? '#FF4136' : null;
        },
        partita: function partita() {
          return this.subalterno.immobile.partita ? this.subalterno.immobile.partita.descrizione : this.subalterno.immobile.partita;
        }
      }
    }
  },
  methods: {
    viewUiu: function viewUiu(id_immobile) {
      this.$parent.setUIUView(id_immobile);
    }
  }
};
/*-----------------------------------*/

/* SCHEDA UIU */
var uiuComponent = {
  template: require('./uiu.html'),
  components: {
    stadio: {
      template: require('./stadio.html'),
      props: ['stadio'],
      components: {
        'tr-datimetrici': {
          template: "\
          <tr>\
            <td>{{ dati_metrici.ambiente }}</td>\
            <td>{{ dati_metrici.superficie }}</td>\
            <td>{{ dati_metrici.altezza }}</td>\
          </tr>\
          ",
          props: ['dati_metrici']
        }
      },
      computed: {
        inizioefficacia: function inizioefficacia() {
          var efficacia = this.stadio.atti.length > 1 ? this.stadio.atti[0].data_efficacia : null;
          return efficacia && efficacia != "" ? efficacia : "ND";
        },
        fineefficacia: function fineefficacia() {
          var efficacia = this.stadio.atti.length > 1 ? this.stadio.atti[1].data_efficacia : null;
          if (efficacia && efficacia == "") {
            efficacia = "ND";
          }
          return efficacia;
        },
        generazione: function generazione() {
          return this.stadio.atti[0];
        },
        conclusione: function conclusione() {
          return this.stadio.atti.length > 1 ? this.stadio.atti[1] : null;
        }
      }
    },
    titolare: {
      template: require('./titolare.html'),
      props: ['titolare'],
      components: {
        'tr-soggetto': {
          template: "\
          <tr v-if=\"soggetto.soggetto\">\
            <td style='padding:5px' v-if=\"soggetto.soggetto.tipo_soggetto=='F'\"><b>{{ soggetto.soggetto.nome }} {{ soggetto.soggetto.cognome }}</b>&nbsp;&nbsp;({{ soggetto.soggetto.codice_fiscale }})&nbsp;&nbsp;Nato il {{ soggetto.soggetto.data_nascita }}  a  {{ soggetto.soggetto.nome_comune }} ({{ soggetto.soggetto.nome_provincia }})&nbsp;&nbsp;(codice comune {{ soggetto.soggetto.codice_comune }})</td>\
            <td style='padding:5px' v-if=\"soggetto.soggetto.tipo_soggetto=='G'\"><b>{{ soggetto.soggetto.denominazione }}</b>,&nbsp;&nbsp;{{ soggetto.soggetto.nome_comune }} ({{ soggetto.soggetto.nome_provincia }})&nbsp;&nbsp;(codice Belfiore {{ soggetto.soggetto.codice_comune }}), P.IVA: {{ soggetto.soggetto.codice_fiscale }}</td>\
            <td style='padding:5px'>{{ soggetto.codice_diritto }}<span v-if=\"soggetto.quota_numeratore > 0 && soggetto.quota_denominatore > 0\">&nbsp;&nbsp;per il {{ perc_diritto }}&nbsp;&nbsp;({{ soggetto.quota_numeratore }}/{{ soggetto.quota_denominatore }})</span>\
                <span v-if='soggetto.regime && soggetto.soggetto_riferimento' v-html='regime'></span></td>\
          </tr>",
          props: ['soggetto'],
          computed: {
            perc_diritto: function perc_diritto() {
              return Math.round10(this.soggetto.quota_numeratore / this.soggetto.quota_denominatore * 100. - 2) + " %";
            },
            regime: function regime() {
              if (_.isObject(this.soggetto_riferimento)) {
                return "<br>" + this.soggetto.regime + "&nbsp;&nbsp;con&nbsp;&nbsp;" + this.soggetto_riferimento.nome + " " + this.soggetto.soggetto_riferimento.cognome + " (" + this.soggetto.soggetto_riferimento.codice_fiscale + ")";
              }
              return "";
            }
          }
        }
      },
      computed: {
        inizio: function inizio() {
          return this.titolare.atti[0];
        },
        fine: function fine() {
          return this.titolare.atti.length ? this.titolare.atti[1] : null;
        }
      }
    },
    docfa: {
      template: require('./docfa.html'),
      props: ['docfa']
    },
    planimetrieiniziali: {
      template: require('./planimetrieiniziali.html'),
      props: ['planimetrie_iniziali']
    }
  },
  //gli viene passato i valori del padre come attributi
  props: ['fabbricato', 'subalterno', 'id_immobile', 'immobile', 'showback'],
  methods: {
    back: function back() {
      this.$parent.setUIUView();
    }
  }
};
/*-----------------------------------*/

var InternalComponent = Vue.extend({
  template: require('./page.html'),
  data: function data() {
    return {
      state: this.$options.state,
      subalterno: null,
      id_immobile: null,
      immobile: null,
      showback: !this.$options.id_immobile,
      service: this.$options.service,
      currentview: null,
      sizes: {
        width: 0,
        height: 0
      }
    };
  },
  components: {
    'fabbricato': fabbricatoComponent,
    'uiu': uiuComponent
  },
  methods: {
    layout: function layout() {
      var _this = this;

      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          width = _ref.width,
          height = _ref.height;

      this.$nextTick(function () {
        var _ref2 = [width, height];
        _this.sizes.width = _ref2[0];
        _this.sizes.height = _ref2[1];

        var headerHeight = $('.header').outerHeight(true);
        var backHeight = $('.back-btn').outerHeight(true);
        var tabsNavHeight = $('.nav-tabs').outerHeight(true);
        var paneHeight = height - backHeight - headerHeight - tabsNavHeight - 30;
        $('.uiu .tab-content').css('height', paneHeight + 'px');
        var fabbricatoSubalterniHeight = height - headerHeight - 20;
        $('.fabbricato .subalterni').css('height', fabbricatoSubalterniHeight + 'px;');
      });
    },

    getSubalterno: function getSubalterno(id_immobile) {
      var subalterno = this.state.subalterni.find(function (subalterno) {
        return subalterno.id_immobile === id_immobile;
      });
      return subalterno;
    },
    setCurrentView: function setCurrentView() {
      var currentview = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'fabbricato';

      this.currentview = currentview;
    },
    setUIUView: function setUIUView(id_immobile) {
      var _this2 = this;

      if (_.isNil(id_immobile)) {
        // setto la currentview a fabbricato (particella)
        this.setCurrentView('fabbricato');
      } else {
        if (this.id_immobile === id_immobile) {
          this.layoutUIUView(id_immobile);
        } else {
          // funzione che deriva dal detailsservice
          this.immobile = {};
          this.service.getUIU(id_immobile).then(function (data) {
            _this2.immobile = data;
            _this2.layoutUIUView(id_immobile);
          }).catch(function (err) {
            this.id_immobile = null;
          });
        }
      }
      return true;
    },
    layoutUIUView: function layoutUIUView(id_immobile) {
      this.subalterno = this.getSubalterno(id_immobile);
      this.setCurrentView('uiu');
    }
  },
  watch: {
    'id_immobile': function id_immobile(_id_immobile) {
      this.setUIUView(_id_immobile);
    },
    'currentview': function currentview() {
      this.layout({
        width: this.sizes.width,
        height: this.sizes.height
      });
    }
  },
  created: function created() {
    var id_immobile = this.$options.id_immobile;
    id_immobile && this.setUIUView(id_immobile) || this.setCurrentView('fabbricato');
  }
});

var Page = function Page(detailService, data) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  options.resizable = true;
  var id_immobile = options.id_immobile;

  base(this, options);
  var internalComponent = new InternalComponent({
    id_immobile: id_immobile,
    state: data,
    service: detailService
  });
  this.setInternalComponent(internalComponent);
};

inherit(Page, Component);

module.exports = Page;

},{"./docfa.html":4,"./fabbricato.html":5,"./page.html":6,"./planimetrieiniziali.html":8,"./stadio.html":9,"./titolare.html":10,"./uiu.html":11}],8:[function(require,module,exports){
module.exports = "<div class=\"planimetrieiniziali\">\n  <div style=\"padding: 5px; overflow: hidden\">\n    <div class=\"info\" style=\"float:left;width:250px;padding-right:20px\">\n      <div style=\"margin-top:5px\">\n        <div><span style=\"font-weight: bold\">Visualizza planimetrie:</span></div>\n        <ul class=\"elenco_planimetrie\" style=\"list-style: none;padding-left:10px\">\n          <li v-for=\"planimetria in planimetrie_iniziali.items\" style=\"display: inline-block\">\n            <i class=\"fa-2x\" :class=\"g3wtemplate.getFontClass('picture')\" style=\"margin-right: 5px\"></i>\n            <a :href=\"planimetria.download_path\" target=\"_blank\">{{ planimetria.nome_file }}</a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n";

},{}],9:[function(require,module,exports){
module.exports = "<div class=\"stadio\">\n    <h4 class=\"table-head\">ValiditÃ  dal <b>{{ inizioefficacia }}</b> <span v-if=\"fineefficacia\">al <b>{{ fineefficacia }}</b></span></h4>\n    <template v-if=\"generazione\">\n        <table style=\"width:100%\">\n            <tr>\n                <td colspan=\"8\" class=\"firstheader head\">Atti di generazione / cessazione dello stadio</td>\n            </tr>\n            <tr>\n                <td class=\"head\">Evento</td>\n                <td class=\"head\">Tipo</td>\n                <td class=\"head\">Nota</td>\n                <td class=\"head\">Anno</td>\n                <td class=\"head\">Prog.</td>\n                <td class=\"head\">ValiditÃ </td>\n                <td class=\"head\">Registrazione</td>\n                <td class=\"head\">Causale</td>\n            </tr>\n            <tr>\n                <td rowspan=\"5\" style=\"width:150px\">Generazione</td>\n                <td>{{ generazione.tipo_nota }}</td>\n                <td>{{ generazione.numero_nota }}</td>\n                <td>{{ generazione.anno_nota }}</td>\n                <td>{{ generazione.progressivo_nota }}</td>\n                <td>{{ generazione.data_efficacia }}</td>\n                <td>{{ generazione.data_registrazione }}</td>\n                <td>{{ generazione.codice_casuale }}</td>\n            </tr>\n            <tr>\n                <td colspan=\"4\" class=\"head\">Descrizione nota</td>\n                <td colspan=\"3\" class=\"head\">Descrizione causale</td>\n            </tr>\n            <tr>\n                <td colspan=\"4\">{{ generazione.descrizione_nota }}</td>\n                <td colspan=\"3\">{{ generazione.codice_casuale }}</td>\n            </tr>\n            <tr>\n                <td colspan=\"7\" class=\"head\">Descrizione Atto</td>\n            </tr>\n            <tr>\n                <td colspan=\"7\">{{ generazione.descrizione_casuale }}&nbsp;</td>\n            </tr>\n        </table>\n    </template>\n    <template v-if=\"conclusione\">\n        <table style=\"width:100%\">\n            <tr>\n                <td class=\"head\">Evento</td>\n                <td class=\"head\">Tipo</td>\n                <td class=\"head\">Nota</td>\n                <td class=\"head\">Anno</td>\n                <td class=\"head\">Prog.</td>\n                <td class=\"head\">ValiditÃ </td>\n                <td class=\"head\">Registrazione</td>\n                <td class=\"head\">Causale</td>\n            </tr>\n            <tr>\n                <td rowspan=\"5\" style=\"width:150px\">Conclusione</td>\n                <td>{{ conclusione.tipo_nota }}</td>\n                <td>{{ conclusione.numero_nota }}</td>\n                <td>{{ conclusione.anno_nota }}</td>\n                <td>{{ conclusione.progressivo_nota }}</td>\n                <td>{{ conclusione.data_efficacia }}</td>\n                <td>{{ conclusione.data_registrazione }}</td>\n                <td>{{ conclusione.codice_casuale }}</td>\n            </tr>\n            <tr>\n                <td colspan=\"4\" class=\"head\">Descrizione nota</td>\n                <td colspan=\"3\" class=\"head\">Descrizione causale</td>\n            </tr>\n            <tr>\n                <td colspan=\"4\">{{ conclusione.descrizione_nota }}</td>\n                <td colspan=\"3\">{{ conclusione.codice_casuale }}</td>\n            </tr>\n            <tr>\n                <td colspan=\"7\" class=\"head\">Descrizione Atto</td>\n            </tr>\n            <tr>\n                <td colspan=\"7\">{{ conclusione.descrizione_casuale }}&nbsp;</td>\n            </tr>\n        </table>\n    </template>\n    <table style=\"width: 100%\">\n        <tr><td colspan=\"7\" class=\"firstheader head\">Dati di classamento dell'immobile</td></tr>\n        <tr>\n            <td class=\"head\">Zona</td>\n            <td class=\"head\">Categoria</td>\n            <td class=\"head\">Descrizione Categoria</td>\n            <td class=\"head\">Classe</td>\n            <td class=\"head\">Consistenza</td>\n            <td class=\"head\">Superficie</td>\n            <td class=\"head\">Rendita in Euro</td>\n        </tr>\n        <tr>\n            <td>{{ stadio.zona }}</td>\n            <td>{{ stadio.categoria }}</td>\n            <td>{{ stadio.descrizione_categoria }}</td>\n            <td>{{ stadio.classe }}</td>\n            <td>{{ stadio.consistenza }}</td>\n            <td>{{ stadio.superficie }}</td>\n            <td>{{ stadio.rendita_euro }}</td>\n        </tr>\n        <tr>\n            <td colspan=\"3\" class=\"head\">Rendita in Euro</td>\n            <td colspan=\"4\" class=\"head\">Periodo di validitÃ </td>\n        </tr>\n        <tr>\n            <td colspan=\"3\">{{ stadio.rendita_euro }}</td>\n            <td colspan=\"4\">dal {{ inizioefficacia }} <span v-if=\"fineefficacia\">al {{ fineefficacia }}</span></td>\n        </tr>\n    </table>\n    <table style=\"width: 100%;\">\n        <tr><td colspan=\"9\" class=\"firstheader head\">Ubicazione</td></tr>\n        <tr>\n            <td class=\"head\">Lotto</td>\n            <td class=\"head\">Edificio</td>\n            <td class=\"head\">Scala</td>\n            <td class=\"head\">Interno 1</td>\n            <td class=\"head\">Interno 2</td>\n            <td class=\"head\">Piano 1</td>\n            <td class=\"head\">Piano 2</td>\n            <td class=\"head\">Piano 3</td>\n            <td class=\"head\">Piano 4</td>\n        </tr>\n        <tr>\n            <td>{{ stadio.lotto }}</td>\n            <td>{{ stadio.edificio }}</td>\n            <td>{{ stadio.scala }}</td>\n            <td>{{ stadio.interno_1 }}</td>\n            <td>{{ stadio.interno_2 }}</td>\n            <td>{{ stadio.piano_1 }}</td>\n            <td>{{ stadio.piano_2 }}</td>\n            <td>{{ stadio.piano_3 }}</td>\n            <td>{{ stadio.piano_4 }}</td>\n        </tr>\n    </table>\n    <table v-if=\"stadio.dati_metrici.length\" style=\"width: 100%\">\n        <tr><td colspan=\"9\" class=\"firstheader head\">Dati metrici</td></tr>\n        <tr>\n            <td class=\"head\">Tipo ambiente</td>\n            <td class=\"head\">Superficie</td>\n            <td class=\"head\">Altezza</td>\n        </tr>\n        <tr v-for=\"dati_metrici in stadio.dati_metrici\" is=\"tr-datimetrici\" :dati_metrici=\"dati_metrici\"></tr>\n    </table>\n</div>\n";

},{}],10:[function(require,module,exports){
module.exports = "<div class=\"titolare\">\n    <h4 v-if=\"fine\" class=\"table-head\">\n        Fine diritto: <b>{{ fine.descrizione_nota }}</b>\n        <span v-if=\"fine.numero_nota\"> <b>nr. {{ fine.numero_nota }}</b></span>\n        <span v-if=\"fine.progressivo_nota && fine.anno_nota\"><b>, {{ fine.progressivo_nota }}/{{ fine.anno_nota }}</b></span>\n        <span v-if=\"fine.data_efficacia\"> del <b>{{ fine.data_efficacia }}</b></span>\n        <span v-if=\"fine.data_registrazione\"> registrato in atti dal <b>{{ fine.data_registrazione }}</b></span>\n    </h4>\n    <h4 class=\"table-head\">\n        Inizio diritto: <b>{{ inizio.descrizione_nota }}</b>\n        <span v-if=\"inizio.numero_nota\"> <b>nr. {{ inizio.numero_nota }}</b></span>\n        <span v-if=\"inizio.progressivo_nota && inizio.anno_nota\">, {{ inizio.progressivo_nota }}/{{ inizio.anno_nota }}</span>\n        <span v-if=\"inizio.data_efficacia\"> del <b>{{ inizio.data_efficacia }}</b></span>\n        <span v-if=\"inizio.data_registrazione\"> registrato in atti dal <b>{{ inizio.data_registrazione }}</b></span>\n    </h4>\n    <table style=\"width:100%\" >\n        <tr class=\"skin-background-color lighten\">\n            <td class=\"head\" style='width:60%; padding:8px; font-size: 1.2em;'>Dati anagrafici</td>\n            <td class=\"head\" style='width:40%; padding:8px; font-size: 1.2em;'>Diritti e oneri reali</td>\n        </tr>\n        <tr v-for=\"soggetto in titolare.soggetti\"  is=\"tr-soggetto\" :soggetto=\"soggetto\"></tr>\n    </table>\n</div>\n";

},{}],11:[function(require,module,exports){
module.exports = "<div class=\"uiu\">\n  <div class=\"back-btn\" v-if=\"showback\" @click=\"back\"><span class=\"back-link\">Particella {{ subalterno.foglio }}/{{ subalterno.numero }}</span> << <span>Subalterno {{ subalterno.subalterno }}</span></div>\n  <div class=\"header\">\n    Dati relativi all'immobile Foglio <b class=\"skin-color\">{{ subalterno.foglio }}</b>, Mappale <b class=\"skin-color\">{{ subalterno.numero }}</b>, Subalterno <b class=\"skin-color\">{{ subalterno.subalterno }}</b>\n  </div>\n  <div id=\"uiu-content\">\n    <ul class=\"nav nav-tabs\" id=\"uiu-tabs\" role=\"tablist\">\n      <li role=\"presentation\" class=\"active\"><a href=\"#stadi\" id=\"stadi-tab\" role=\"tab\" data-toggle=\"tab\" aria-controls=\"stadi\" aria-expanded=\"true\">Stadi dell'immobile</a></li>\n      <li role=\"presentation\"><a href=\"#titolari\" role=\"tab\" id=\"titolari-tab\" data-toggle=\"tab\" aria-controls=\"titolari\">Titolari per data</a></li>\n      <li role=\"presentation\">\n        <a href=\"#docfa\" role=\"tab\" id=\"docfa-tab\" data-toggle=\"tab\" aria-controls=\"docfa\">Docfa</a>\n      </li>\n      <li role=\"presentation\">\n        <a href=\"#planimetrie_iniziali\" role=\"tab\" id=\"planimetrie_iniziali_tab\" data-toggle=\"tab\" aria-controls=\"planimetrie_iniziali\">\n          Planimetrie Iniziali</a>\n      </li>\n    </ul>\n    <div class=\"tab-content\" id=\"panes\">\n      <div class=\"tab-pane fade in active\" role=\"tabpanel\" id=\"stadi\" aria-labelledby=\"stadi-tab\">\n        <stadio v-for=\"stadio in immobile.stadi.items\" :stadio=\"stadio\" style=\"margin-bottom:15px\"></stadio>\n      </div>\n      <div class=\"tab-pane\" role=\"tabpanel\" id=\"titolari\" aria-labelledby=\"titolari-tab\">\n        <titolare v-for=\"titolare in immobile.titolari.items\" :titolare=\"titolare\" style=\"margin-bottom:15px;\"></titolare>\n      </div>\n      <div class=\"tab-pane\" style=\"font-weight: bold\" role=\"tabpanel\" id=\"docfa\" aria-labelledby=\"docfa-tab\">\n        <docfa v-if=\"immobile.docfa.items.length\" v-for=\"docfa in immobile.docfa.items\" :docfa=\"docfa\" style=\"margin-bottom:15px\"></docfa>\n        <div  v-else v-t-plugin=\"'cadastre.nodata'\"></div>\n      </div>\n      <div class=\"tab-pane\" style=\"font-weight: bold\" role=\"tabpanel\" id=\"planimetrie_iniziali\" aria-labelledby=\"planimetrie_iniziali_tab\">\n        <planimetrieiniziali v-if=\"immobile.planimetrie_iniziali.items.length\" :planimetrie_iniziali=\"immobile.planimetrie_iniziali\" style=\"margin-bottom:15px\"></planimetrieiniziali>\n        <div v-else v-t-plugin=\"'cadastre.nodata'\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n";

},{}],12:[function(require,module,exports){
module.exports = "<div class=\"cadastre-page\">\n    <component\n        :is=\"currentview\"\n        :terreno=\"state\"\n        :particella=\"particella\"\n        :id_particella=\"id_particella\">\n    </component>\n</div>\n";

},{}],13:[function(require,module,exports){
var inherit = g3wsdk.core.utils.inherit;
var base = g3wsdk.core.utils.base;
var Component = g3wsdk.gui.vue.Component;
var GUI = g3wsdk.gui.GUI;

/* SCHEDA PRINCIPALE FABBRICATO */
var terrenoComponent = {
  template: require('./terreno.html'),
  props: ['terreno', 'particella'],
  components: {
    "tr-particella": {
      template: '\
      <tr @click="$parent.viewParticella(particella.id_particella)">\
        <td style="cursor:pointer"><span class="action-button action-button-icon" :class="infoFontClass"></td>\
        <td>{{ particella.foglio }}</td>\
        <td>{{ particella.numero }}</td>\
        <td>{{ particella.id_particella }}</td>\
        <td>{{ particella.sezione }}</td>\
        <td>{{ particella.subalterno }}</td>\
        <td :style="{background: partitaBackGroundColor}" >{{ partita }}</td>\
        <td>{{ particella.progressivo }}</td>\
        <td>{{ particella.denominatore }}</td>\
      </tr>',
      props: ['particella'],
      computed: {
        infoFontClass: function infoFontClass() {
          return GUI.getFontClass('info');
        },

        partitaBackGroundColor: function partitaBackGroundColor() {
          return this.particella.partita && this.particella.partita.valore == '0000000' ? '#FF4136' : null;
        },
        partita: function partita() {
          return this.particella.partita ? this.particella.partita.descrizione : this.particella.partita;
        }
      }
    }
  },
  methods: {
    viewParticella: function viewParticella(id_particella) {
      this.$parent.setSubView(id_particella);
    }
  }
};
/*-----------------------------------*/

/* SCHEDA UIU */
var subComponent = {
  template: require('./particella.html'),
  mounted: function mounted() {
    this.$nextTick(function () {
      var headerHeight = $('.header').outerHeight(true);
      var tabsNavHeight = $('.cadastre-page .nav-tabs').outerHeight(true);
      var paneHeight = $('.cadastre-page').parent().height() - headerHeight - tabsNavHeight - 20;
      $('.cadastre-page .tab-content').height(paneHeight);
    });
  },
  components: {
    stadio: {
      template: require('./stadio.html'),
      props: ['stadio'],
      components: {
        'tr-porzione': {
          template: "\
          <tr>\
            <td>{{ porzione.qualita }}</td>\
            <td>{{ porzione.classe }}</td>\
            <td>{{ porzione.superficie }}</td>\
            <td>{{ porzione.reddito_dominicale }}</td>\
            <td>{{ porzione.reddito_agrario }}</td>\
          </tr>",
          props: ['porzione']
        }
      },
      computed: {
        inizioefficacia: function inizioefficacia() {
          var efficacia = this.stadio.atti[0].data_efficacia;
          return efficacia && efficacia != "" ? efficacia : "ND";
        },
        fineefficacia: function fineefficacia() {
          var efficacia = this.stadio.atti.length > 1 ? this.stadio.atti[1].data_efficacia : null;
          if (efficacia && efficacia == "") {
            efficacia = "ND";
          }
          return efficacia;
        },
        generazione: function generazione() {
          return this.stadio.atti[0];
        },
        conclusione: function conclusione() {
          return this.stadio.atti.length > 1 ? this.stadio.atti[1] : null;
        },
        deduzioni: function deduzioni() {
          var simboli = [];
          for (var i = 0; i < this.stadio.deduzioni.length; i++) {
            simboli.push(this.stadio.deduzioni[i].simbolo);
          }
          return simboli.join(", ");
        }
      }
    },
    titolare: {
      template: require('./titolare.html'),
      props: ['titolare'],
      components: {
        'tr-soggetto': {
          template: "\
          <tr  v-if=\"soggetto.soggetto\">\
            <td v-if=\"soggetto.soggetto.tipo_soggetto=='F'\"><b>{{ soggetto.soggetto.nome }} {{ soggetto.soggetto.cognome }}</b>&nbsp;&nbsp;({{ soggetto.soggetto.codice_fiscale }})&nbsp;&nbsp;Nato il {{ soggetto.soggetto.data_nascita }}  a  {{ soggetto.soggetto.nome_comune }} ({{ soggetto.soggetto.nome_provincia }})&nbsp;&nbsp;(codice comune {{ soggetto.soggetto.codice_comune }})</td>\
            <td v-if=\"soggetto.soggetto.tipo_soggetto=='G'\"><b>{{ soggetto.soggetto.denominazione }}</b>,&nbsp;&nbsp;{{ soggetto.soggetto.nome_comune }} ({{ soggetto.soggetto.nome_provincia }})&nbsp;&nbsp;(codice Belfiore {{ soggetto.soggetto.codice_comune }}), P.IVA: {{ soggetto.soggetto.codice_fiscale }}</td>\
            <td>{{ soggetto.codice_diritto }}<span v-if=\"soggetto.quota_numeratore > 0 && soggetto.quota_denominatore > 0\">&nbsp;&nbsp;per il {{ perc_diritto }}&nbsp;&nbsp;({{ soggetto.quota_numeratore }}/{{ soggetto.quota_denominatore }})</span><span v-if='soggetto.regime && soggetto.soggetto_riferimento' v-html='regime'></td>\
          </tr>",
          props: ['soggetto'],
          computed: {
            perc_diritto: function perc_diritto() {
              return Math.round10(this.soggetto.quota_numeratore / this.soggetto.quota_denominatore * 100. - 2) + " %";
            },
            regime: function regime() {
              if (_.isObject(this.soggetto_riferimento)) {
                return "<br>" + this.soggetto.regime + "&nbsp;&nbsp;con&nbsp;&nbsp;" + this.soggetto_riferimento.nome + " " + this.soggetto.soggetto_riferimento.cognome + " (" + this.soggetto.soggetto_riferimento.codice_fiscale + ")";
              }
              return "";
            }
          }
        }
      },
      computed: {
        inizio: function inizio() {
          return this.titolare.atti[0];
        },
        fine: function fine() {
          return this.titolare.atti.length ? this.titolare.atti[1] : null;
        }
      }
    }
  },
  //gli viene passato i valori del padre come attributi
  props: ['terreno', 'particella', 'id_particella'],
  methods: {
    back: function back() {
      this.$parent.setSubView();
    }
  }
};
/*-----------------------------------*/

var InternalComponent = Vue.extend({
  template: require('./page.html'),
  data: function data() {
    return {
      state: null,
      particella: null,
      id_particella: null,
      immobile: null,
      currentview: 'terreno', // proprietÃ  che serve per switchare tra componenti
      sizes: {
        width: 0,
        height: 0
      }
    };
  },
  components: {
    'terreno': terrenoComponent,
    'particella': subComponent
  },
  methods: {
    layout: function layout() {
      var _this = this;

      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          width = _ref.width,
          height = _ref.height;

      this.$nextTick(function () {
        var _ref2 = [width, height];
        _this.sizes.width = _ref2[0];
        _this.sizes.height = _ref2[1];

        var headerHeight = $('.header').outerHeight(true);
        var tabsNavHeight = $('.nav-tabs').outerHeight(true);
        var paneHeight = height - headerHeight - tabsNavHeight - 20;
        $('.uiu .tab-content').css('height', paneHeight + 'px');
        var terrenoSubalterniHeight = height - headerHeight - 20;
        $('.terreno .subalterni').css('height', terrenoSubalterniHeight + 'px;');
      });
    },

    getParticella: function getParticella(id_particella) {
      var particella = null;
      this.state.subalterni.forEach(function (_particella) {
        if (_particella.id_particella == id_particella) {
          particella = _particella;
        }
      });
      return particella;
    },
    setSubView: function setSubView(id_particella) {
      var _this2 = this;

      if (_.isNil(id_particella)) {
        // setto la currentview a fabbricato (particella)
        this.currentview = 'terreno';
      } else {
        if (this.id_particella === id_particella) {
          this.layoutSubView(id_particella);
        }
        // funzione che deriva dal detailsservice
        this.service.getParticella(id_particella).then(function (data) {
          _this2.particella = data;
          Vue.nextTick(function () {
            _this2.layoutSubView(id_particella);
          });
        }).catch(function () {
          _this2.id_particella = null;
        });
      }
    },
    layoutSubView: function layoutSubView(id_particella) {
      this.immobile = {};
      this.currentview = 'particella';
    }
  },
  watch: {
    'id_particella': function id_particella(_id_particella) {
      this.setSubView(_id_particella);
    }
  }
});

var Page = function Page(ds, data, options) {
  base(this);
  // istanzio il componente interno
  var internalComponent = new InternalComponent();
  // associo il servizio che altro non Ã¨ che il detailservice
  internalComponent.service = ds;
  if (options.id_particella) {
    internalComponent.id_particella = options.id_particella;
  }
  internalComponent.state = data;
  this.setInternalComponent(internalComponent);
};
inherit(Page, Component);

module.exports = Page;

},{"./page.html":12,"./particella.html":14,"./stadio.html":15,"./terreno.html":16,"./titolare.html":17}],14:[function(require,module,exports){
module.exports = "<div class=\"uiu\">\n    <div class=\"back-btn\" @click=\"back\"><span class=\"back-link\">Terreno {{ terreno.foglio }}/{{ terreno.numero }}</span> << <span>Subalterno {{ id_particella }}</span></div>\n    <div class=\"header\">\n        <div>\n            Dati relativi al terreno Foglio <b>{{ terreno.foglio }}</b>, Mappale <b>{{ terreno.numero }}</b>, Subalterno <b>{{ id_particella }}</b>\n        </div>\n    </div>\n    <div id=\"uiu-content\">\n        <ul class=\"nav nav-tabs\" id=\"tabs\" role=\"tablist\">\n            <li role=\"presentation\" class=\"active\"><a href=\"#stadi\" id=\"stadi-tab\" role=\"tab\" data-toggle=\"tab\" aria-controls=\"stadi\" aria-expanded=\"true\">Stadi del terreno</a></li>\n            <li role=\"presentation\"><a href=\"#titolari\" role=\"tab\" id=\"titolari-tab\" data-toggle=\"tab\" aria-controls=\"titolari\">Titolari per data</a></li>\n        </ul>\n        <div class=\"tab-content\" id=\"panes\">\n            <div class=\"tab-pane fade in active\" role=\"tabpanel\" id=\"stadi\" aria-labelledby=\"stadi-tab\">\n                <stadio v-for=\"stadio in particella.stadi.items\" :stadio=\"stadio\" style=\"margin-bottom:5px\"></stadio>\n            </div>\n            <div class=\"tab-pane\" role=\"tabpanel\" id=\"titolari\" aria-labelledby=\"titolari-tab\">\n                <titolare v-for=\"titolare in particella.titolari.items\" :titolare=\"titolare\" style=\"margin-bottom:5px\"></titolare>\n            </div>\n        </div>\n    </div>\n</div>\n";

},{}],15:[function(require,module,exports){
module.exports = "<div class=\"stadio\">\n    <div class=\"table-head\">ValiditÃ  dal <b>{{ inizioefficacia }}</b> <span v-if=\"fineefficacia\">al <b>{{ fineefficacia }}</b></span></div>\n    <table style=\"width: 100%\">\n        <tr><td colspan=\"3\" class=\"firstheader head\">Caratteristiche particella</td></tr>\n        <tr>\n            <td class=\"head\">QualitÃ </td>\n            <td class=\"head\">Classe</td>\n            <td class=\"head\">Superficie</td>\n        </tr>\n        <tr>\n            <td>{{ stadio.qualita }}</td>\n            <td>{{ stadio.classe }}</td>\n            <td>{{ stadio.superficie }}</td>\n        </tr>\n    </table>\n    <table style=\"width: 100%\">\n        <tr><td colspan=\"5\" class=\"firstheader head\">Reddito particella</td></tr>\n        <tr>\n            <td class=\"head\">Porzioni</td>\n            <td class=\"head\">Deduzioni</td>\n            <td class=\"head\">Reddito dominicale</td>\n            <td class=\"head\">Reddito agrario</td>\n            <td class=\"head\">Reddito</td>\n        </tr>\n        <tr>\n            <td>{{ stadio.porzioni.length ? 'Presenti' : 'Assenti' }}</td>\n            <td>{{ stadio.deduzioni.length ? deduzioni : 'Assenti' }}</td>\n            <td>{{ stadio.reddito_dominicale }}</td>\n            <td>{{ stadio.reddito_agrario }}</td>\n            <td>{{ stadio.reddito }}</td>\n        </tr>\n    </table>\n    <table v-if=\"stadio.porzioni.length\" style=\"width: 100%\">\n        <tr><td colspan=\"5\" class=\"firstheader head\">Porzioni particella</td></tr>\n        <tr>\n            <td class=\"head\">QualitÃ </td>\n            <td class=\"head\">Classe</td>\n            <td class=\"head\">Superficie</td>\n            <td class=\"head\">Reddito dominicale</td>\n            <td class=\"head\">Reddito agrario</td>\n        </tr>\n        <tr v-for=\"porzione in stadio.porzioni\" is=\"tr-porzione\" :porzione=\"porzione\"></tr>\n    </table>\n    <template v-if=\"generazione\">\n        <table style=\"width:100%\">\n            <tr><td colspan=\"8\" class=\"firstheader head\">Atti di generazione / cessazione dello stadio</td></tr>\n            <tr>\n                <td class=\"head\">Evento</td>\n                <td class=\"head\">Tipo</td>\n                <td class=\"head\">Nota</td>\n                <td class=\"head\">Anno</td>\n                <td class=\"head\">Prog.</td>\n                <td class=\"head\">ValiditÃ </td>\n                <td class=\"head\">Registrazione</td>\n                <td class=\"head\">Causale</td>\n            </tr>\n            <tr>\n                <td rowspan=\"5\" style=\"width:150px\">Generazione</td>\n                <td>{{ generazione.tipo_nota }}</td>\n                <td>{{ generazione.numero_nota }}</td>\n                <td>{{ generazione.anno_nota }}</td>\n                <td>{{ generazione.progressivo_nota }}</td>\n                <td>{{ generazione.data_efficacia }}</td>\n                <td>{{ generazione.data_registrazione }}</td>\n                <td>{{ generazione.codice_casuale }}</td>\n            </tr>\n            <tr>\n                <td colspan=\"4\" class=\"head\">Descrizione nota</td>\n                <td colspan=\"3\" class=\"head\">Descrizione causale</td>\n            </tr>\n            <tr>\n                <td colspan=\"4\">{{ generazione.descrizione_nota }}</td>\n                <td colspan=\"3\">{{ generazione.codice_casuale }}</td>\n            </tr>\n            <tr>\n                <td colspan=\"7\" class=\"head\">Descrizione Atto</td>\n            </tr>\n            <tr>\n                <td colspan=\"7\">{{ generazione.descrizione_casuale }}&nbsp;</td>\n            </tr>\n        </table>\n    </template>\n    <template v-if=\"conclusione\">\n        <table style=\"width:100%\">\n            <tr>\n                <td class=\"head\">Evento</td>\n                <td class=\"head\">Tipo</td>\n                <td class=\"head\">Nota</td>\n                <td class=\"head\">Anno</td>\n                <td class=\"head\">Prog.</td>\n                <td class=\"head\">ValiditÃ </td>\n                <td class=\"head\">Registrazione</td>\n                <td class=\"head\">Causale</td>\n            </tr>\n            <tr>\n                <td rowspan=\"5\" style=\"width:150px\">Conclusione</td>\n                <td>{{ conclusione.tipo_nota }}</td>\n                <td>{{ conclusione.numero_nota }}</td>\n                <td>{{ conclusione.anno_nota }}</td>\n                <td>{{ conclusione.progressivo_nota }}</td>\n                <td>{{ conclusione.data_efficacia }}</td>\n                <td>{{ conclusione.data_registrazione }}</td>\n                <td>{{ conclusione.codice_casuale }}</td>\n            </tr>\n            <tr>\n                <td colspan=\"4\" class=\"head\">Descrizione nota</td>\n                <td colspan=\"3\" class=\"head\">Descrizione causale</td>\n            </tr>\n            <tr>\n                <td colspan=\"4\">{{ conclusione.descrizione_nota }}</td>\n                <td colspan=\"3\">{{ conclusione.codice_casuale }}</td>\n            </tr>\n            <tr>\n                <td colspan=\"7\" class=\"head\">Descrizione Atto</td>\n            </tr>\n            <tr>\n                <td colspan=\"7\">{{ conclusione.descrizione_casuale }}&nbsp;</td>\n            </tr>\n        </table>\n    </template>\n</div>";

},{}],16:[function(require,module,exports){
module.exports = "<div class=\"terreno\">\n  <div class=\"header\">\n    Dati relativi alla particella <b>{{ terreno.foglio }}/{{ terreno.numero }}</b>\n  </div>\n  <div v-if=\"terreno.subalterni.length\" class=\"subalterni\">\n    <table class=\"table table-striped\">\n      <thead>\n        <tr>\n          <th></th>\n          <th>Foglio</th>\n          <th>Numero</th>\n          <th>ID particella</th>\n          <th>Sez.</th>\n          <th>Sub.</th>\n          <th>Partita</th>\n          <th>Progressivo</th>\n          <th>Denom.</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"particella in terreno.subalterni\" is=\"tr-particella\" :particella=\"particella\" class=\"pointer\"></tr>\n      </tbody>\n    </table>\n  </div>\n  <div style=\"font-weight: bold;\" v-else>Non sono registrati particelle per questo terreno.</div>\n</div>\n";

},{}],17:[function(require,module,exports){
module.exports = "<div class=\"titolare\">\n    <div v-if=\"fine\" class=\"table-head\">\n        Fine diritto: <b>{{ fine.descrizione_nota }}</b> \n        <span v-if=\"fine.numero_nota\"> <b>nr. {{ fine.numero_nota }}</b></span>\n        <span v-if=\"fine.progressivo_nota && fine.anno_nota\"><b>, {{ fine.progressivo_nota }}/{{ fine.anno_nota }}</b></span>\n        <span v-if=\"fine.data_efficacia\"> del <b>{{ fine.data_efficacia }}</b></span>\n        <span v-if=\"fine.data_registrazione\"> registrato in atti dal <b>{{ fine.data_registrazione }}</b></span>\n    </div>\n    <div class=\"table-head\">\n        Inizio diritto: <b>{{ inizio.descrizione_nota }}</b>\n        <span v-if=\"inizio.numero_nota\"> <b>nr. {{ inizio.numero_nota }}</b></span>\n        <span v-if=\"inizio.progressivo_nota && inizio.anno_nota\">, {{ inizio.progressivo_nota }}/{{ inizio.anno_nota }}</span>\n        <span v-if=\"inizio.data_efficacia\"> del <b>{{ inizio.data_efficacia }}</b></span>\n        <span v-if=\"inizio.data_registrazione\"> registrato in atti dal <b>{{ inizio.data_registrazione }}</b></span>\n    </div>\n    <table style=\"width:100%\">\n        <tr>\n            <td class=\"head\" style='width:60%'>Dati anagrafici</td>\n            <td class=\"head\" style='width:40%'>Diritti e oneri reali</td>\n        </tr>\n        <tr v-for=\"soggetto in titolare.soggetti\" is=\"tr-soggetto\" :soggetto=\"soggetto\"></tr>\n    </table>\n</div>";

},{}],18:[function(require,module,exports){
var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var inherit = g3wsdk.core.utils.inherit;
var base = g3wsdk.core.utils.base;
var Plugin = g3wsdk.core.plugin.Plugin;
var addI18nPlugin = g3wsdk.core.i18n.addI18nPlugin;
var Service = require('./services/pluginservice');
var DetailsService = require('./services/detailsservice');


var _Plugin = function _Plugin() {
  base(this);
  this.name = 'cadastre';
  this.init = function () {
    this.setService(Service);
    this.config = this.getConfig();
    if (this.registerPlugin(this.config.gid)) {
      // add i18n of the plugin
      addI18nPlugin({
        name: this.name,
        config: _config2.default.i18n
      });
      DetailsService.init(this.config);
      this.service.init(this.config);
      var api = this.service.setCadastreApi();
      this.setApi(api);
      this.setReady(true);
    }
  };
  //unload plugin
  this.unload = function () {
    DetailsService.clear();
  };
};

inherit(_Plugin, Plugin);

(function (plugin) {
  plugin.init();
})(new _Plugin());

},{"./config":3,"./services/detailsservice":19,"./services/pluginservice":20}],19:[function(require,module,exports){
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var GUI = g3wsdk.gui.GUI;
var XHR = g3wsdk.core.utils.XHR;
var tPlugin = g3wsdk.core.i18n.tPlugin;
// pagine riferite alle particelle terreno e fabbricato
var TerrenoPage = require('../details/terreno/page');
var FabbricatoPage = require('../details/fabbricato/page');
// classe DeatilService utile alla visualizzazione dei dettagli
// della particella
var DetailsService = function DetailsService() {
  this.config = {};
  this.addActionLinenerKey = null;
  this.queryResultsService = null;
  // vine inizializzato quando Ã¨ inizializzato
  // il service del plugin passandola configurazione del plugin
  this.init = function () {
    var _this = this;

    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.config = config;
    // recupero il queryresultservice
    this.queryResultsService = GUI.getComponent('queryresults').getService();
    //prima di aggiungere le azioni (interazione come gotofeature, etc..)
    // aggiunge azione custom per il catasto
    var catastoLayersId = Array.isArray(this.config.layers.catasto) && this.config.layers.catasto.map(function (_ref) {
      var id = _ref.id;
      return id;
    }) || [this.config.layers.catasto.id];
    this.addActionLinenerKey = this.queryResultsService.onbefore('addActionsForLayers', function (actions) {
      if (actions) {
        catastoLayersId.forEach(function (layerId) {
          actions[layerId] && actions[layerId].push({
            id: 'particelladetail',
            class: GUI.getFontClass('info'),
            hint: 'plugins.cadastre.actions.infoparcel',
            cbk: _this.openDetail.bind(_this),
            condition: function condition() {
              var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  feature = _ref2.feature;

              return ['T', 'F'].indexOf(feature.attributes['tipo']) > -1;
            }
          });
        });
      }
    });
  };

  this.openDetail = function (particella) {
    var _this2 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    // verifico che la feature sia diversa da null
    if (particella) {
      var attributes = void 0;
      // nel caso in cui sono la features contiene
      // l'attributo attributes
      if (particella.attributes) {
        // caso in cui chiamo da queryresults o da  form
        attributes = options.attributes || particella.attributes;
      } else {
        // nel caso non esiste ala proprietÃ  attributes
        // quindi praticamente viene chiamato dal form di editing
        // costruisco io al volo l'oggetto attributi
        attributes = {
          tipo: particella.tipo,
          foglio: particella.foglio,
          numero: particella.numero
        };
      }
      var type = attributes.tipo === 'T' && 'terreno' || attributes.tipo === 'F' && 'fabbricato' || null;
      GUI.setLoadingContent(true);
      this.getDetail(type, attributes).then(function (response) {
        _this2.openDetailPage(type, response, options);
      }).catch(function (error) {
        GUI.notify.error(tPlugin('cadastre.messages.errors.parcel'));
      }).finally(function () {
        GUI.setLoadingContent(false);
      });
    }
  };

  // funzione adibita al recupero dei dettagli della particella
  this.getDetail = function (type, attributes) {
    if (!type) return Promise.reject();
    //dalla configurazione recupero l'url
    var detailgConfig = this.config.details[type];

    var _ref3 = detailgConfig ? [this.config.details[type].url, this.config.details[type].params] : type === 'particella' ? ["/cadastre/api/particella/", "id_particella"] : [null, null],
        _ref4 = _slicedToArray(_ref3, 2),
        url = _ref4[0],
        params = _ref4[1];

    var queryStringPairs = [];
    if (type === 'fabbricato' || type === 'terreno') {
      params = [].concat(_toConsumableArray(params), ['codbo', 'particella']);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var param = _step.value;

          if (attributes[param] !== undefined) queryStringPairs.push(param + '=' + attributes[param]);else queryStringPairs.push(param + '=');
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } else {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = params[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _param = _step2.value;

          queryStringPairs.push(_param + '=' + attributes[_param]);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
    // creo la query string per la chiamata
    var queryString = queryStringPairs.join('&');
    url += '?' + queryString;
    return XHR.get({ url: url });
  };

  // funzione adibita al mostare il contenuto all'interno del contenComponent
  this.openDetailPage = function (tipoDetail, data) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var content = void 0;
    var id_immobile = options.id_immobile;

    var backonclose = id_immobile ? false : options.backonclose && false;
    // vado a considerare il tipo di partccella Ã¨ stata richiesta
    // a quel punto istanzio il relativo componente
    switch (tipoDetail) {
      case 'terreno':
        content = new TerrenoPage(this, data, options);
        break;
      case 'fabbricato':
        content = new FabbricatoPage(this, data, options);
        break;
    }
    // chaimao il metodo pushContent
    GUI.pushContent({
      content: content,
      backonclose: backonclose,
      closable: false
    });
  };

  // funzione che server a recuperare i
  // dati dell' immobile
  this.getUIU = function (id_immobile) {
    return this.getDetail('immobile', {
      id_immobile: id_immobile
    });
  };

  // subalterni terreni
  this.getParticella = function (id_particella) {
    return this.getDetail('particella', {
      id_particella: id_particella
    });
  };

  //clear method to remove event on queryResultService
  this.clear = function () {
    this.queryResultsService.un('addActionsForLayers', this.addActionLinenerKey);
  };
};

module.exports = new DetailsService();

},{"../details/fabbricato/page":7,"../details/terreno/page":13}],20:[function(require,module,exports){
var _api = require('../api');

var _api2 = _interopRequireDefault(_api);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var inherit = g3wsdk.core.utils.inherit;
var XHR = g3wsdk.core.utils.XHR;
var base = g3wsdk.core.utils.base;
var GUI = g3wsdk.gui.GUI;
var DetailsService = require('./detailsservice');
var PluginService = g3wsdk.core.plugin.PluginService;

function CadastreService() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  base(this, options);
  this._editingApi;
  this._session;
  this._feature;
  this.state = {
    civici: {}
  };

  this.setCadastreApi = function () {
    var _this = this;

    var api = new _api2.default({
      service: DetailsService
    });
    api.getDetails = function () {
      return _this.getDetails();
    };
    api.getParticella = function (attributes) {
      var type = attributes.tipo === 'T' && 'terreno' || attributes.tipo === 'F' && 'fabbricato' || null;
      return DetailsService.getDetail(type, attributes);
    };
    this.setApi({
      api: api
    });
    return api;
  };
  // get details from plugin configuration
  this.getDetails = function () {
    return this.config.details;
  };

  // get subalerni
  this.getSubalterni = function (params) {
    var url = this.getDetails().fabbricato.url;
    // return a promise
    return XHR.get({
      url: url,
      params: params
    });
  };

  this.getLayerCatasto = function () {
    var mapService = GUI.getComponent('map').getService();
    var config = this.getConfig();
    var catastoId = config.layers.catasto.id;
    return mapService.getProjectLayer(catastoId);
  };
}
inherit(CadastreService, PluginService);

module.exports = new CadastreService();

},{"../api":1,"./detailsservice":19}]},{},[18])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
